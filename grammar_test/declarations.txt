======
import
======

import Foo
import Foo.Bar
import typealias Foo.Bar.Quux

---

(program
	(import_declaration (identifier))
	(import_declaration (identifier) (identifier))
	(import_declaration (identifier) (identifier) (identifier)))

======
constant
======

let foo
let foo = bar
let foo, bar = foo
let foo, bar = foo, quux: Int = baz

---

(program
	(constant_declaration (identifier))
	(constant_declaration (identifier) (identifier))
	(constant_declaration (identifier) (identifier) (identifier))
	(constant_declaration (identifier) (identifier) (identifier) (identifier) (type (identifier)) (identifier)))

======
variable
======

var foo
var foo = bar
var foo: Int { get }
var foo: Int { get set }
var foo: Int { set get }
var foo, bar = foo
var foo, bar = foo, quux: Int = baz

---

(program
	(variable_declaration (identifier))
	(variable_declaration (identifier) (identifier))
	(variable_declaration (identifier) (type (identifier)))
	(variable_declaration (identifier) (type (identifier)))
	(variable_declaration (identifier) (type (identifier)))
	(variable_declaration (identifier) (identifier) (identifier))
	(variable_declaration (identifier) (identifier) (identifier) (identifier) (type (identifier)) (identifier)))

======
typealias
======

typealias Foo = Int

---

(program
	(typealias_declaration (identifier) (type (identifier))))

======
function
======

func foo() {}
func > () {}
func foo() -> Int {}
func foo(_: Int) {}
func foo(x: Int) {}
func foo(_ x: Int) {}
func foo(x x: Int) {}
func foo(x: Int, y: Int) {}
func foo(x: Int, y: Int)() {}
func foo(x: Int, y: Int)(x: Int, y: Int) {}

---

(program
	(function_declaration (identifier))
	(function_declaration (operator))
	(function_declaration (identifier) (type (identifier)))
	(function_declaration (identifier) (type (identifier)))
	(function_declaration (identifier) (identifier) (type (identifier)))
	(function_declaration (identifier) (identifier) (type (identifier)))
	(function_declaration (identifier) (identifier) (identifier) (type (identifier)))
	(function_declaration (identifier) (identifier) (type (identifier)) (identifier) (type (identifier)))
	(function_declaration (identifier) (identifier) (type (identifier)) (identifier) (type (identifier)))
	(function_declaration (identifier) (identifier) (type (identifier)) (identifier) (type (identifier)) (identifier) (type (identifier)) (identifier) (type (identifier))))

======
enum
======

enum A {}
enum A {
	case A
}
enum A {
	case A(Int)
}
enum A {
	case A = ""
}

---

(program
	(enum_declaration (identifier))
	(enum_declaration (identifier) (case_declaration (identifier)))
	(enum_declaration (identifier) (case_declaration (identifier) (tuple_type (type (identifier)))))
	(enum_declaration (identifier) (case_declaration (identifier) (static_string_literal))))

======
struct
======

struct A {}

---

(program
	(struct_declaration (identifier)))

======
class
======

class A {}

---

(program
	(class_declaration (identifier)))
